WEBVTT

00:00.570 --> 00:08.280
Now in the last lesson we created the skeleton of what will form the basis of our input page for our

00:08.280 --> 00:09.840
BMI calculator.

00:09.840 --> 00:17.190
And we saw that when we created are reusable code and we extracted it as a separate state this widget

00:17.520 --> 00:25.680
that when we create a property if we omit the word final we get an error that tells us that the reusable

00:25.680 --> 00:33.100
Card class or the class which inherits from which is a stateless widget is marked as immutable.

00:33.270 --> 00:40.200
But one of its instance fields are not final and it points to our color field which obviously doesn't

00:40.200 --> 00:42.960
have the final keyword.

00:42.960 --> 00:48.570
Now there's a lot of words that get thrown around in programming and very often they mean very similar

00:48.570 --> 00:52.800
things but people just choose to use different terms for it.

00:52.860 --> 00:57.990
If you're learning programming for the first time it actually makes sense to keep almost a dictionary

00:58.020 --> 01:04.680
or a glossary of terms just to be able to understand what each of the terms mean and in the previous

01:04.680 --> 01:08.020
warning it said of something called an instance field.

01:08.400 --> 01:14.340
And it's important to note that when people talk about instance variables or instance fields or properties

01:14.610 --> 01:22.140
they're actually talking about the same thing and all it refers to is just the property that we create

01:22.470 --> 01:28.520
that we can change inside the class or when we construct the class.

01:28.560 --> 01:32.420
We can set it to have a different value.

01:32.530 --> 01:36.980
Now the other term that we saw in that warning is immutability.

01:37.070 --> 01:38.580
Well what does immutability mean.

01:38.590 --> 01:46.030
Well mutable means it's changeable so immutable means unchangeable and the things are unchangeable when

01:46.030 --> 01:52.810
it comes to lots to development are pretty much all of all stateless widgets the widgets are kind of

01:52.810 --> 01:58.040
like a Lego block and each of the blocks itself can't be changed.

01:58.060 --> 02:02.200
You can't really break a Lego piece in half or try to saw it.

02:02.200 --> 02:07.870
Well you could probably saw it in half but then that's not really in the spirit of the game is it.

02:07.900 --> 02:13.210
So even though each of the lego blocks are immutable they can't be changed.

02:13.210 --> 02:21.130
So how do we make changes to our app which is built up using a whole bunch of immutable or unchangeable

02:21.130 --> 02:21.790
blocks.

02:22.210 --> 02:29.800
Well we can simply take one of these immutable widgets that needs to be changed destroy it and in its

02:29.800 --> 02:35.140
place build a new one that has the changes that we want.

02:35.310 --> 02:43.830
What that means is that when we update a particular widget on screen what happens is the old widget

02:44.130 --> 02:51.570
because it's immutable can't be changed so it actually gets destroyed and a new one gets created in

02:51.570 --> 02:53.670
its place with the update.

02:53.670 --> 02:58.170
So for example in this case the widget used to have a white background.

02:58.380 --> 03:04.800
And when that widget needs updates have a blue background then it will get destroyed and a new one with

03:04.800 --> 03:08.130
a blue background will get created in its place.

03:08.130 --> 03:10.610
So this is how immutability works.

03:10.680 --> 03:17.790
And speaking of immutability stateless widgets are immutable they can't be changed their states don't

03:17.790 --> 03:20.080
change because they're stateless.

03:20.100 --> 03:26.940
So all of its properties also can only be set once and then it's kind of set in stone if you want to

03:27.000 --> 03:34.060
update it you have to create a new one and pass in a new color for the new reusable code.

03:34.110 --> 03:40.470
So that's why we have to add that keyword final in front of the property in order for this to only be

03:40.470 --> 03:43.280
set once and then it cannot be changed.

03:43.290 --> 03:48.990
It's the final value of the color of the reusable code.

03:49.000 --> 03:51.080
Now we're talking about immutable.

03:51.170 --> 03:58.420
There's actually two different types of properties that can both be immutable and you'll commonly see

03:58.480 --> 04:03.840
these two different keywords used across your of projects.

04:03.850 --> 04:08.140
And it's very very easy to get confused between what they actually do.

04:08.770 --> 04:14.770
So I wanted to spend this lesson talking quickly about what is the difference between the final keyword

04:14.920 --> 04:16.600
and the con keyword.

04:16.600 --> 04:20.640
And when you mark something as final concert what it actually means.

04:20.710 --> 04:25.800
So round one pipe in order to do that.

04:25.820 --> 04:31.370
Let's head over to dot pad and let's create a concert and a final.

04:31.640 --> 04:42.100
So we know that we can create a new variable by writing something like int my number equals 2.

04:42.110 --> 04:47.810
Now in this case the first keyword marks the data type that the variable can contain.

04:47.810 --> 04:50.080
The second is the name of the variable.

04:50.120 --> 04:53.980
And then after the equal sign is the value that's contained in the variable.

04:53.990 --> 05:02.630
We've seen this lots of times but if we wanted this variable to be not variable anymore if we want it

05:02.630 --> 05:10.470
to never be able to change then we can have a choice of using a constant or a final.

05:10.820 --> 05:14.870
Either way we would add those keywords at the very beginning.

05:14.900 --> 05:24.890
So let's create a concept and let's rename this to my const and then let's create a final end and let's

05:24.890 --> 05:29.860
name this my final and I'm going to make this equal to three.

05:29.870 --> 05:36.830
Now the right hand side doesn't really matter other than to be able to show you that if at a later date

05:36.950 --> 05:41.310
I decided that I actually want my cousins to hold a different value.

05:41.330 --> 05:45.380
So I wanted to write my concept now equals four.

05:45.800 --> 05:53.630
Then I will get an error because constants are immutable and you can see down here constant variables

05:53.930 --> 06:00.140
can't be assigned a value again and it's because it already has a starting value.

06:00.140 --> 06:02.370
And that will never ever change.

06:02.450 --> 06:05.180
It will always hold on to that value.

06:05.180 --> 06:13.280
This particular my concept can only be two and it cannot be changed after it's created.

06:13.280 --> 06:16.070
Now the same thing applies to final.

06:16.100 --> 06:22.100
So if we want to change my final two let's say six it also gives us an error.

06:22.100 --> 06:30.680
Final is a final variable can only be set once in both of these cases they're immutable.

06:30.920 --> 06:36.100
But if we had on the other hand a variable a normal variable.

06:36.380 --> 06:44.790
So let's bring out my number again and we wanted to set my number to be a new value say for.

06:44.810 --> 06:49.100
Well that's of course possible because this is how variables work.

06:49.160 --> 06:53.290
They can be created and then at a later date they can be changed.

06:53.300 --> 06:54.710
They can be varied.

06:54.710 --> 07:01.220
This is why they're called variables but for constants and for final variables they can't change in

07:01.220 --> 07:01.800
value.

07:01.970 --> 07:05.870
So the immutability part is usually pretty easy to grasp.

07:05.900 --> 07:08.030
You assign it a value to begin with.

07:08.030 --> 07:14.240
When you created and then it has to be that value from now on you can't change it ever again.

07:14.240 --> 07:18.860
But the hard part is knowing when do you use const and when do I use final.

07:18.880 --> 07:23.420
Because at first glance it seems like they pretty much do the same thing right.

07:24.200 --> 07:30.260
Well there's some subtle differences between the two of them and that is what we're going to explore

07:30.260 --> 07:37.420
in this lesson so if you read The Dark language to it we'll talk about final and concert and it will

07:37.420 --> 07:46.990
say that a final variable can be set only once whereas a concert variable is a compile time constant.

07:47.680 --> 07:51.190
So what does this mean.

07:51.210 --> 07:59.400
Well the moment when I click on the run button my code that I've written here in the dark language will

07:59.400 --> 08:03.600
be compiled to a format that the machine can understand.

08:03.720 --> 08:11.790
So something closer to the ones and zeros and in that moment it has to be able to work out the value

08:11.820 --> 08:13.980
that should be held inside the constant.

08:14.550 --> 08:18.040
But for a final this doesn't have to be the case.

08:18.120 --> 08:21.420
It can be worked on at any point down the line.

08:21.420 --> 08:30.090
Let me demonstrate this are constant could be for example two plus five multiplied by eight.

08:30.090 --> 08:38.160
This is perfectly valid as a concept because it can be calculated the moment that I click Run and the

08:38.160 --> 08:44.780
value of that right hand side will be set to my const now.

08:44.820 --> 08:54.120
What we can't do though is at runtime or when our app is actually running on the phone if I want to

08:54.120 --> 09:02.910
use something that is only available at that point say a button that's on screen and I want to try and

09:02.910 --> 09:11.990
get its dimensions then I can't do that with a concert and I would have to use a final so a concert

09:12.410 --> 09:16.180
can't have access to anything at runtime.

09:16.190 --> 09:23.240
So when your app is running if there's something that's created after the code has been compiled then

09:23.330 --> 09:26.700
it shouldn't be set to a concert.

09:26.720 --> 09:34.190
For example if I wanted to calculate the current time then I wouldn't need to create a new object from

09:34.220 --> 09:43.480
the date time and then I could use the date time object and I could tap in to something called now and

09:43.480 --> 09:50.650
this should give me the current date and time but it can't be assigned to a constant because this has

09:50.650 --> 09:54.280
to be worked out after my code has run.

09:54.460 --> 10:03.280
And then we can get access to the date time but if I had instead moved this into my final then you'll

10:03.280 --> 10:11.110
see that this is perfectly valid code other than the fact that it's not an integer that comes out.

10:11.320 --> 10:21.260
If I print now my final then you can see that it calculates the date and time after the code is compiled

10:21.710 --> 10:24.510
and it shows you what that time is.

10:25.640 --> 10:35.810
If we head back to our code then you can see that we can change our color to a final but it can't be

10:35.870 --> 10:42.180
a const because the color comes from when we create a new reusable code.

10:42.380 --> 10:48.050
And that could be created at any time not just at the time when the code is compiled but it could be

10:48.080 --> 10:55.970
any time when our app is running and it is in that moment when we get the value for color and so we

10:55.970 --> 10:58.370
can't actually use a console here.

10:58.430 --> 11:00.480
It has to be a final.

11:00.710 --> 11:08.480
Now similarly it can't just be a simple variable because our reusable code is immutable.

11:08.480 --> 11:15.670
So whenever we create a new reusable card then it will create an immutable stateless widget.

11:16.340 --> 11:24.680
And whenever the reusable car needs to change say its color or its size then that reusable card that

11:24.680 --> 11:33.320
specific one actually gets destroyed and a new one takes its place so its properties can't be mutable

11:33.350 --> 11:34.910
it can't change.

11:35.000 --> 11:43.070
Which is why we need to declare it as final Now usually when we're writing our code numbers and hardcoded

11:43.250 --> 11:48.190
things in our design are usually represented by a constant.

11:48.200 --> 11:55.370
So let's say that if we were to create the bottom part of our design which is simply just a container

11:55.400 --> 12:02.220
that has a fixed height then we might do that there at the very bottom of our column.

12:02.240 --> 12:10.680
So just before the column ends probably right here and we can add our new container which is going to

12:10.680 --> 12:26.320
have a color of 0 x F F E B one Triple Five and this is a nice sort of pink color that we got from the

12:26.320 --> 12:28.530
design on the dribble side down here.

12:29.790 --> 12:32.560
And then we're going to add a margin.

12:32.560 --> 12:40.300
And in this case we only actually want the margin to be there for the top of this container and all

12:40.300 --> 12:43.750
the other parts of the container the side and the bottom.

12:43.810 --> 12:48.490
We actually want to have no margin so that it very much sticks to all sides.

12:48.490 --> 12:51.720
So instead of saying edge in sets all we're going to say.

12:51.720 --> 12:53.630
Engine sets only.

12:53.730 --> 13:00.580
And the one that we're going to set is the top which we're going to set to 10 and then we want to set

13:00.580 --> 13:02.230
the width of our container.

13:02.590 --> 13:10.780
And in my case we want to have this container stretch out all the way across the width of the screen

13:11.140 --> 13:12.880
no matter which screen is on.

13:12.880 --> 13:18.460
So it could be on a small screen an iPhone 4 or a large iPad doesn't matter.

13:18.460 --> 13:19.930
We want it to stretch.

13:19.930 --> 13:25.720
So the easiest way of doing this is simply writing double dot infinity.

13:25.720 --> 13:32.390
And this will give us a value that is going to be equal to the full width of the screen.

13:33.310 --> 13:40.850
So now all we need to do is to simply give our container a fixed height of 80 pixels.

13:41.050 --> 13:44.900
And if we hit save we should be up to see it right here.

13:44.980 --> 13:53.200
And this is what it looks like which is pretty neat now here where we have our height as a fixed 80

13:53.210 --> 13:54.240
pixels.

13:54.320 --> 13:57.200
We might at a later stage decide that that's too high.

13:57.200 --> 14:03.590
Maybe we want to make it smaller or maybe you want to make it taller and it's quite hard digging through

14:03.920 --> 14:07.080
the actual code to be able to change this.

14:07.100 --> 14:14.180
So very often you see constants being used in this case where they're defined at the very top of a file

14:14.660 --> 14:23.270
and let's call it bottom container height and we're going to set it to eighty point zero.

14:23.270 --> 14:30.830
And now inside are container we can change the height to that constant bottom container height.

14:30.980 --> 14:36.500
And now we don't have to dig through the code to try and find out where it is and try and fix all the

14:36.500 --> 14:38.410
places where that exists.

14:38.420 --> 14:44.570
Now we can simply look at the top and look at our constants and change them if we need to.

14:44.570 --> 14:51.230
So this can easily be a constant because we can work it out at the point when we click Run.

14:51.230 --> 14:52.690
So it's 80 pixels.

14:52.760 --> 14:59.900
Even if it was 80 times two that's all things that we can work out at the time when we actually run

14:59.990 --> 15:00.780
our app.

15:00.860 --> 15:07.160
But what we can't make a constant is something that requires an app to be currently running.

15:07.340 --> 15:14.080
So we can't for example decide that we want to create a constant that's based on our color.

15:14.090 --> 15:21.020
So for example what if we want to know the string value of our color and we want to create a constant

15:21.020 --> 15:31.370
code color string and we set it to equal the value of our color property dot to string which would normally

15:31.370 --> 15:34.060
create a string value from that color.

15:34.310 --> 15:41.000
But this is completely illegal because con's variables must be initialized with a constant value can't

15:41.000 --> 15:48.360
be something that has to be worked out at a later stage or when color actually receives a value.

15:48.380 --> 15:50.470
So this is illegal.

15:50.510 --> 15:52.000
Now it's your turn.

15:52.160 --> 16:00.200
And the challenge is we have all of these colors which are created using the raw hex code and they're

16:00.200 --> 16:05.990
kind of inside our widgets in many places cluttering up our code.

16:06.020 --> 16:12.040
So can you create a constant to collect them together at the very top.

16:12.110 --> 16:19.070
And if we wanted to change the color of our reusable cards then we only need to do it in one place instead

16:19.070 --> 16:19.850
of six.

16:19.880 --> 16:24.330
So pause the video and try to complete this challenge.

16:24.550 --> 16:24.850
All right.

16:24.880 --> 16:28.360
So this is as easy as creating a bottom container height.

16:28.420 --> 16:34.540
We're going to create at the very top of the file and we're going to call this whatever you wanted to

16:34.540 --> 16:43.270
call but I'm going to call it active card color and we're going to set that to equal the color that

16:43.270 --> 16:44.680
we have over here.

16:44.740 --> 16:51.970
So we're gonna copy that and paste it here and then now every time we use that color we can simply use

16:51.970 --> 16:55.250
the active card color in its place.

16:55.360 --> 17:01.780
And this again is something that can be worked out at the moment when we press the run button.

17:01.780 --> 17:08.830
Now we have our active card color and you might want to go a step further and move our bottom container

17:08.860 --> 17:10.660
color up to the top as well.

17:10.660 --> 17:18.600
So let's cut that and let's add a another constant code bottom container color.

17:18.940 --> 17:26.790
And this is going to be equal to that pinkish color up here and now we can replace it down here with

17:26.890 --> 17:29.590
bottom container color.

17:29.620 --> 17:37.630
So now our code looks a lot cleaner and everything that is hardcoded now refers to a constant that lives

17:37.630 --> 17:43.420
at the top the screen which is very easily found and easily changed and we know that all the changes

17:43.420 --> 17:47.800
that we make here will get reflected in all the places where they used.

17:47.800 --> 17:53.850
So this is a really common use for Constance now in the coming lessons.

17:53.890 --> 17:58.090
We're going to be using constants and final in a lot of places.

17:58.180 --> 18:01.240
So you'll have plenty of practice and plenty of exposure.

18:01.300 --> 18:06.250
So if it doesn't make complete sense straight away don't worry we're going to come back to it and we're

18:06.250 --> 18:10.410
going to revisit it in the coming lessons in the next lesson there.

18:10.420 --> 18:18.790
We're going to add a child to our reusable code and make it even more customized with some custom content

18:18.820 --> 18:20.770
that's contained inside the code.

18:20.770 --> 18:24.120
So for all of that and more I'll see you on the next lesson.
