WEBVTT

00:00.980 --> 00:07.640
Now as this code gets longer it doesn't really feel right to keep it inside the loading screen anymore

00:08.060 --> 00:15.690
so let's refactor it and try to move our location getting code into a separate class.

00:16.010 --> 00:19.010
And I'd like you to do that as a challenge.

00:19.010 --> 00:24.620
I'd like you to refactor this code so that all the logic of getting the current location will be handled

00:24.680 --> 00:27.470
by a dedicated location object.

00:27.470 --> 00:32.170
This means creating a separate location class in the location dot dot file.

00:32.210 --> 00:37.000
This class needs to have two properties a latitude and longitude.

00:37.070 --> 00:41.190
It also needs to have a method could get current location.

00:41.210 --> 00:44.920
This is where you'll need to move the try catch block from the loading screen.

00:46.360 --> 00:52.630
Back in the loading screen update the get location method so that you create a new location object you

00:52.630 --> 00:58.870
call the get current location method and then you print the value stored inside the latitude and longitude.

00:58.870 --> 01:02.100
This challenge will test your understanding of async and await.

01:02.140 --> 01:04.300
So keep those principles in mind.

01:04.300 --> 01:10.270
I'll give you a few seconds to pause the video before I walk you through the solution.

01:10.810 --> 01:11.890
OK ready.

01:11.890 --> 01:13.130
Here's the solution.

01:13.150 --> 01:20.950
The first step is creating a new class in the location dot dot file code location and this location

01:20.950 --> 01:23.990
class is going to have two properties.

01:24.070 --> 01:29.380
It's going to hold onto a latitude and also a longer tude.

01:29.470 --> 01:34.990
Now they're both going to be doubles because that's the output from our geo locator.

01:34.990 --> 01:40.960
When we do position dot last due to position dot longitude the data type will be a double.

01:40.960 --> 01:49.390
So now let's go ahead and create a class method and we'll call it get current location and this is not

01:49.390 --> 01:56.060
gonna take any inputs but it is going to use that geo locator package.

01:56.230 --> 02:03.430
So let's go ahead and cut our try catch block out of our get location method and instead paste it into

02:03.490 --> 02:10.020
this get current location method we're again gonna use the geo locator to get the current position.

02:10.120 --> 02:12.460
Now of course we need that a keyword.

02:12.490 --> 02:20.020
So we have to mark this as async so that we can all wait for the current position to be found before

02:20.080 --> 02:29.030
we return it as the output of this method and instead of printing the position we're going to assign

02:29.090 --> 02:33.750
the position of latitude and position to a long etude to these two properties.

02:33.770 --> 02:41.750
So we're gonna say latitude is now gonna be equal to position dot latitude and longitude is gonna be

02:41.750 --> 02:46.280
now equal to position dot longitude.

02:46.360 --> 02:53.430
So now when we call get current location it should try to wait to get the current location and then

02:53.490 --> 02:57.550
assign those values to our latitude and longitude.

02:57.750 --> 03:04.440
Going back to our loading screen inside get location we should you have to tap into that file by importing

03:04.560 --> 03:08.760
our services folder and then we're going to search for our location.

03:08.760 --> 03:09.800
Dot dot file.

03:09.810 --> 03:18.150
So that's the full path to this file and then we're going to create a new location object which we'll

03:18.150 --> 03:23.670
just call location and we're gonna set it to equal a new location object.

03:23.670 --> 03:31.060
And once we've initialize that location object we're going to say location dot get current location.

03:31.080 --> 03:39.240
Now remember if we want to use the result of the location dot latitude or location dot longitude which

03:39.240 --> 03:46.560
comes from this location object we have to wait for this get current location to complete.

03:47.070 --> 03:55.350
So ideally we want to be able to mark this as a wait but remember that we can only wait on methods that

03:55.350 --> 03:56.950
return futures.

03:57.210 --> 04:04.290
So over here instead of just returning a void let's return a future void instead.

04:04.620 --> 04:12.180
And this way if we head back to our loading screen you can see we can now wait on this to complete before

04:12.210 --> 04:21.540
we start tapping into the location Latitude or location dot longitude and it's only by waiting for this

04:21.540 --> 04:29.480
method to complete can we reliably actually get access to the latitude and longitude.

04:29.540 --> 04:35.540
So now let's hit run and see our code in action so you can see we're able to tap into the latitude and

04:35.540 --> 04:38.410
longitude in our loading screen.

04:38.420 --> 04:39.180
Dot dot.

04:39.410 --> 04:46.640
Even though the location code is actually all located inside a separate file the location dot dot file

04:48.720 --> 04:55.050
now asynchronous programming is notoriously hard in any programming language not just dot.

04:55.050 --> 05:01.320
So if this was still confusing I recommend heading back into the lesson we covered async in a way and

05:01.320 --> 05:06.750
just watching it again maybe on double speed just to make sure that you're revisiting those concepts

05:06.780 --> 05:07.250
again.

05:07.320 --> 05:13.040
It might take a couple of tries before all the pieces start coming together and it starts making sense

05:13.950 --> 05:19.950
but if all of that was easy then we're going to continue ahead to making API calls and actually using

05:19.950 --> 05:24.030
these latitude and longitude to get the weather for our current location.

05:24.060 --> 05:26.780
So for all of that and more I'll see on the next lesson.
